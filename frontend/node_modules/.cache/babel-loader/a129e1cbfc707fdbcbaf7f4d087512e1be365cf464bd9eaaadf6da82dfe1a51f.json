{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\nclass ApiService {\n  constructor() {\n    this.client = axios.create({\n      baseURL: API_BASE_URL,\n      timeout: 30000,\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n  }\n  async analyzePassword(password) {\n    try {\n      const response = await this.client.post('/analyze_password', {\n        password\n      });\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n  async checkHealth() {\n    try {\n      const response = await this.client.get('/');\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n  handleError(error) {\n    if (error.response) {\n      // Server responded with error status\n      return new Error(error.response.data.error || 'Server error occurred');\n    } else if (error.request) {\n      // Request was made but no response received\n      return new Error('Unable to connect to server. Please check if the backend is running.');\n    } else {\n      // Something else happened\n      return new Error(error.message || 'An unexpected error occurred');\n    }\n  }\n}\nexport default new ApiService();","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","ApiService","constructor","client","create","baseURL","timeout","headers","analyzePassword","password","response","post","data","error","handleError","checkHealth","get","Error","request","message"],"sources":["/Users/hassan/Downloads/coding/Cypher/PassShield/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\n\nclass ApiService {\n  constructor() {\n    this.client = axios.create({\n      baseURL: API_BASE_URL,\n      timeout: 30000,\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    });\n  }\n\n  async analyzePassword(password) {\n    try {\n      const response = await this.client.post('/analyze_password', { password });\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  async checkHealth() {\n    try {\n      const response = await this.client.get('/');\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  handleError(error) {\n    if (error.response) {\n      // Server responded with error status\n      return new Error(error.response.data.error || 'Server error occurred');\n    } else if (error.request) {\n      // Request was made but no response received\n      return new Error('Unable to connect to server. Please check if the backend is running.');\n    } else {\n      // Something else happened\n      return new Error(error.message || 'An unexpected error occurred');\n    }\n  }\n}\n\nexport default new ApiService();"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,uBAAuB;AAE7E,MAAMC,UAAU,CAAC;EACfC,WAAWA,CAAA,EAAG;IACZ,IAAI,CAACC,MAAM,GAAGP,KAAK,CAACQ,MAAM,CAAC;MACzBC,OAAO,EAAER,YAAY;MACrBS,OAAO,EAAE,KAAK;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB;IACF,CAAC,CAAC;EACJ;EAEA,MAAMC,eAAeA,CAACC,QAAQ,EAAE;IAC9B,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAM,IAAI,CAACP,MAAM,CAACQ,IAAI,CAAC,mBAAmB,EAAE;QAAEF;MAAS,CAAC,CAAC;MAC1E,OAAOC,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACd,MAAM,IAAI,CAACC,WAAW,CAACD,KAAK,CAAC;IAC/B;EACF;EAEA,MAAME,WAAWA,CAAA,EAAG;IAClB,IAAI;MACF,MAAML,QAAQ,GAAG,MAAM,IAAI,CAACP,MAAM,CAACa,GAAG,CAAC,GAAG,CAAC;MAC3C,OAAON,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACd,MAAM,IAAI,CAACC,WAAW,CAACD,KAAK,CAAC;IAC/B;EACF;EAEAC,WAAWA,CAACD,KAAK,EAAE;IACjB,IAAIA,KAAK,CAACH,QAAQ,EAAE;MAClB;MACA,OAAO,IAAIO,KAAK,CAACJ,KAAK,CAACH,QAAQ,CAACE,IAAI,CAACC,KAAK,IAAI,uBAAuB,CAAC;IACxE,CAAC,MAAM,IAAIA,KAAK,CAACK,OAAO,EAAE;MACxB;MACA,OAAO,IAAID,KAAK,CAAC,sEAAsE,CAAC;IAC1F,CAAC,MAAM;MACL;MACA,OAAO,IAAIA,KAAK,CAACJ,KAAK,CAACM,OAAO,IAAI,8BAA8B,CAAC;IACnE;EACF;AACF;AAEA,eAAe,IAAIlB,UAAU,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}