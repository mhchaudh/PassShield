{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\nclass ApiService {\n  constructor() {\n    this.client = axios.create({\n      baseURL: API_BASE_URL,\n      timeout: 30000,\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n  }\n  async analyzePassword(password) {\n    try {\n      const response = await this.client.post('/analyze_password', {\n        password\n      });\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n  async hashPassword(password, hashTypes = ['md5', 'sha256', 'bcrypt', 'argon2']) {\n    try {\n      const response = await this.client.post('/hash_password', {\n        password,\n        hash_types: hashTypes\n      });\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n  async startDictionaryAttack(hashValue, hashType = 'md5') {\n    try {\n      const response = await this.client.post('/start_dictionary_attack', {\n        hash_value: hashValue,\n        hash_type: hashType\n      });\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n  async startBruteForceAttack(hashValue, hashType = 'md5', charset = 'abcdefghijklmnopqrstuvwxyz0123456789', minLength = 1, maxLength = 4) {\n    try {\n      const response = await this.client.post('/start_brute_force_attack', {\n        hash_value: hashValue,\n        hash_type: hashType,\n        charset: charset,\n        min_length: minLength,\n        max_length: maxLength\n      });\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n  async stopAttack() {\n    try {\n      const response = await this.client.post('/stop_attack');\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n  async getAttackStatus() {\n    try {\n      const response = await this.client.get('/attack_status');\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n  async checkHealth() {\n    try {\n      const response = await this.client.get('/');\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n  handleError(error) {\n    if (error.response) {\n      // Server responded with error status\n      return new Error(error.response.data.error || 'Server error occurred');\n    } else if (error.request) {\n      // Request was made but no response received\n      return new Error('Unable to connect to server. Please check if the backend is running.');\n    } else {\n      // Something else happened\n      return new Error(error.message || 'An unexpected error occurred');\n    }\n  }\n}\nexport default new ApiService();","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","ApiService","constructor","client","create","baseURL","timeout","headers","analyzePassword","password","response","post","data","error","handleError","hashPassword","hashTypes","hash_types","startDictionaryAttack","hashValue","hashType","hash_value","hash_type","startBruteForceAttack","charset","minLength","maxLength","min_length","max_length","stopAttack","getAttackStatus","get","checkHealth","Error","request","message"],"sources":["/Users/hassan/Downloads/coding/Cypher/PassShield/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\n\nclass ApiService {\n  constructor() {\n    this.client = axios.create({\n      baseURL: API_BASE_URL,\n      timeout: 30000,\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    });\n  }\n\n  async analyzePassword(password) {\n    try {\n      const response = await this.client.post('/analyze_password', { password });\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  async hashPassword(password, hashTypes = ['md5', 'sha256', 'bcrypt', 'argon2']) {\n    try {\n      const response = await this.client.post('/hash_password', {\n        password,\n        hash_types: hashTypes,\n      });\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  async startDictionaryAttack(hashValue, hashType = 'md5') {\n    try {\n      const response = await this.client.post('/start_dictionary_attack', {\n        hash_value: hashValue,\n        hash_type: hashType,\n      });\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  async startBruteForceAttack(\n    hashValue,\n    hashType = 'md5',\n    charset = 'abcdefghijklmnopqrstuvwxyz0123456789',\n    minLength = 1,\n    maxLength = 4\n  ) {\n    try {\n      const response = await this.client.post('/start_brute_force_attack', {\n        hash_value: hashValue,\n        hash_type: hashType,\n        charset: charset,\n        min_length: minLength,\n        max_length: maxLength,\n      });\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  async stopAttack() {\n    try {\n      const response = await this.client.post('/stop_attack');\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  async getAttackStatus() {\n    try {\n      const response = await this.client.get('/attack_status');\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  async checkHealth() {\n    try {\n      const response = await this.client.get('/');\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  handleError(error) {\n    if (error.response) {\n      // Server responded with error status\n      return new Error(error.response.data.error || 'Server error occurred');\n    } else if (error.request) {\n      // Request was made but no response received\n      return new Error('Unable to connect to server. Please check if the backend is running.');\n    } else {\n      // Something else happened\n      return new Error(error.message || 'An unexpected error occurred');\n    }\n  }\n}\n\nexport default new ApiService();"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,uBAAuB;AAE7E,MAAMC,UAAU,CAAC;EACfC,WAAWA,CAAA,EAAG;IACZ,IAAI,CAACC,MAAM,GAAGP,KAAK,CAACQ,MAAM,CAAC;MACzBC,OAAO,EAAER,YAAY;MACrBS,OAAO,EAAE,KAAK;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB;IACF,CAAC,CAAC;EACJ;EAEA,MAAMC,eAAeA,CAACC,QAAQ,EAAE;IAC9B,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAM,IAAI,CAACP,MAAM,CAACQ,IAAI,CAAC,mBAAmB,EAAE;QAAEF;MAAS,CAAC,CAAC;MAC1E,OAAOC,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACd,MAAM,IAAI,CAACC,WAAW,CAACD,KAAK,CAAC;IAC/B;EACF;EAEA,MAAME,YAAYA,CAACN,QAAQ,EAAEO,SAAS,GAAG,CAAC,KAAK,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE;IAC9E,IAAI;MACF,MAAMN,QAAQ,GAAG,MAAM,IAAI,CAACP,MAAM,CAACQ,IAAI,CAAC,gBAAgB,EAAE;QACxDF,QAAQ;QACRQ,UAAU,EAAED;MACd,CAAC,CAAC;MACF,OAAON,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACd,MAAM,IAAI,CAACC,WAAW,CAACD,KAAK,CAAC;IAC/B;EACF;EAEA,MAAMK,qBAAqBA,CAACC,SAAS,EAAEC,QAAQ,GAAG,KAAK,EAAE;IACvD,IAAI;MACF,MAAMV,QAAQ,GAAG,MAAM,IAAI,CAACP,MAAM,CAACQ,IAAI,CAAC,0BAA0B,EAAE;QAClEU,UAAU,EAAEF,SAAS;QACrBG,SAAS,EAAEF;MACb,CAAC,CAAC;MACF,OAAOV,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACd,MAAM,IAAI,CAACC,WAAW,CAACD,KAAK,CAAC;IAC/B;EACF;EAEA,MAAMU,qBAAqBA,CACzBJ,SAAS,EACTC,QAAQ,GAAG,KAAK,EAChBI,OAAO,GAAG,sCAAsC,EAChDC,SAAS,GAAG,CAAC,EACbC,SAAS,GAAG,CAAC,EACb;IACA,IAAI;MACF,MAAMhB,QAAQ,GAAG,MAAM,IAAI,CAACP,MAAM,CAACQ,IAAI,CAAC,2BAA2B,EAAE;QACnEU,UAAU,EAAEF,SAAS;QACrBG,SAAS,EAAEF,QAAQ;QACnBI,OAAO,EAAEA,OAAO;QAChBG,UAAU,EAAEF,SAAS;QACrBG,UAAU,EAAEF;MACd,CAAC,CAAC;MACF,OAAOhB,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACd,MAAM,IAAI,CAACC,WAAW,CAACD,KAAK,CAAC;IAC/B;EACF;EAEA,MAAMgB,UAAUA,CAAA,EAAG;IACjB,IAAI;MACF,MAAMnB,QAAQ,GAAG,MAAM,IAAI,CAACP,MAAM,CAACQ,IAAI,CAAC,cAAc,CAAC;MACvD,OAAOD,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACd,MAAM,IAAI,CAACC,WAAW,CAACD,KAAK,CAAC;IAC/B;EACF;EAEA,MAAMiB,eAAeA,CAAA,EAAG;IACtB,IAAI;MACF,MAAMpB,QAAQ,GAAG,MAAM,IAAI,CAACP,MAAM,CAAC4B,GAAG,CAAC,gBAAgB,CAAC;MACxD,OAAOrB,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACd,MAAM,IAAI,CAACC,WAAW,CAACD,KAAK,CAAC;IAC/B;EACF;EAEA,MAAMmB,WAAWA,CAAA,EAAG;IAClB,IAAI;MACF,MAAMtB,QAAQ,GAAG,MAAM,IAAI,CAACP,MAAM,CAAC4B,GAAG,CAAC,GAAG,CAAC;MAC3C,OAAOrB,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACd,MAAM,IAAI,CAACC,WAAW,CAACD,KAAK,CAAC;IAC/B;EACF;EAEAC,WAAWA,CAACD,KAAK,EAAE;IACjB,IAAIA,KAAK,CAACH,QAAQ,EAAE;MAClB;MACA,OAAO,IAAIuB,KAAK,CAACpB,KAAK,CAACH,QAAQ,CAACE,IAAI,CAACC,KAAK,IAAI,uBAAuB,CAAC;IACxE,CAAC,MAAM,IAAIA,KAAK,CAACqB,OAAO,EAAE;MACxB;MACA,OAAO,IAAID,KAAK,CAAC,sEAAsE,CAAC;IAC1F,CAAC,MAAM;MACL;MACA,OAAO,IAAIA,KAAK,CAACpB,KAAK,CAACsB,OAAO,IAAI,8BAA8B,CAAC;IACnE;EACF;AACF;AAEA,eAAe,IAAIlC,UAAU,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}